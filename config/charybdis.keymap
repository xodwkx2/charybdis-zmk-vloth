#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define NUFU 1
#define SYM 2
#define NAV 3
#define MED 4
#define POI 5
#define SCR 6
#define SNI 7

&sl {
  release-after-ms = <250>;
};

&mt {
    tapping-term-ms = <200>;
    require-prior-idle-ms = <150>;
};

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };

    #include "combos.dtsi"

    behaviors {
        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <210>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            hold-trigger-on-release;
        };

        hmr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <210>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            hold-trigger-on-release;
        };
    };


    keymap {
        compatible = "zmk,keymap";
        Base {
            label = "Base";
            bindings = <
              &kp       Q  &kp       W  &kp        E  &kp        R  &kp T        &kp Y  &kp        U  &kp        I  &kp       O  &kp                P  
              &hml LSHFT A &hml LGUI S  &hml LALT D   &hml LCTRL F  &kp G        &kp H  &hml RCTRL J  &hml RALT K   &hml RGUI L  &hml RSHFT SEMICOLON  
              &lt   SYM Z  &kp       X  &kp        C  &kp        V  &kp B        &kp N  &kp        M  &kp    COMMA  &kp     DOT  &lt SYM SLASH
                                        &lt MED ESC  &lt NAV SPACE  &sl NUFU     &kp ENTER &lt NAV BACKSPACE
            >;
        };

        NuFu {
            label = "Numeral/Function";
            bindings = <
                &kp LC(LG(Q))  &kp    F7  &kp   UP       &kp    F9  &kp F12     &trans    &kp N7     &kp N8    &kp N9     &kp DELETE
                &trans         &kp  LEFT  &kp DOWN       &kp RIGHT  &kp F11     &kp PLUS  &kp MINUS  &kp STAR  &kp SLASH  &kp BACKSPACE
                &kp F19        &kp   F16  &kp  F17       &kp   F18  &none       &kp LBRC  &kp RBRC   &kp LBKT  &kp RBKT   &kp BSLH
                                          &kp BACKSPACE  &kp ENTER  &trans      &trans    &trans 
            >;
        };

        Symbol {
            label = "Symbol";
            bindings = <
              &kp EXCL  &kp AT    &kp HASH   &kp DLLR  &kp PRCNT       &kp CARET  &kp AMPS  &kp ASTRK  &kp LPAR  &kp RPAR
              &kp N1    &kp N2    &kp N3     &kp N4    &kp N5          &kp N6     &kp N7    &kp N8     &kp N9    &kp N0
              &none &none  &none     &none  &none       &trans         &none      &none     &none      &none
                                  &trans     &trans    &trans          &trans     &trans
            >;
        };

        Navigation {
            label = "Navigation";
            bindings = <
              &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4         &trans        &trans         &kp TAB      &trans     &kp DELETE
              &trans        &trans        &trans        &trans        &trans               &kp LEFT      &kp DOWN       &kp UP       &kp RIGHT  &kp BACKSPACE
              &trans        &trans        &trans        &trans        &trans               &kp HOME      &kp PAGE_DOWN  &kp PAGE_UP  &kp END    &kp INS
                                          &bt BT_CLR    &trans        &trans               &out OUT_TOG  &trans
            >;
        };

        Media {
            label = "Media";
            bindings = <
              &trans     &trans        &bt BT_CLR_ALL &trans       &trans            &trans      &trans        &bt BT_CLR_ALL  &trans        &trans
              &kp C_PREV &kp C_VOL_DN  &kp C_MUTE     &kp C_VOL_UP &kp C_NEXT        &kp C_PREV  &kp C_VOL_DN  &kp C_MUTE      &kp C_VOL_UP  &kp C_NEXT
              &trans     &trans        &trans         &trans       &trans            &trans      &trans        &trans          &trans        &trans
                                       &trans    &kp C_PLAY_PAUSE  &kp C_STOP        &kp C_STOP  &kp C_PLAY_PAUSE
            >;
        };

        Pointer {
            label = "Pointer";
            bindings = <
              &trans       &trans       &trans        &trans        &trans               &trans &trans        &trans        &trans       &trans
              &kp LGUI     &kp LALT     &kp LCTRL     &kp LSHFT     &trans               &trans &kp RSHFT     &kp RCTRL     &kp RALT     &kp RGUI
              &trans       &mo SCR      &mo SNI       &trans        &trans               &trans &trans        &tog SNI      &tog SCR     &trans
                                            &mkp RCLK  &mkp LCLK  &mkp MCLK         &mkp MCLK  &mkp LCLK
            >;
        };

        Scroll {
            label = "Scroll";
            bindings = <
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                                &trans  &trans  &trans    &trans  &trans
            >;
        };

        Sniper {
            label = "Sniper";
            bindings = <
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                                &trans  &trans  &trans    &trans  &trans
            >;
        };
    };
};
